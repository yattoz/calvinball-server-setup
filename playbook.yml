- name: The Play
  hosts: localhost
  vars_files:
    - vars/users.yml
    - vars/packages.yml
    - vars/runtime_credentials.vault.yml
  vars:
    install_dir: /opt/calvinball-website
    cockpit_module_install_dir: /opt/cockpit_modules/cvb-rebuild-site

  tasks:
    - name: Ping
      ansible.builtin.ping:

    - name: Print message
      ansible.builtin.debug:
        msg: Hello world

  ## user tasks

    - name: Create group
      group:
        name: "{{ podcast_group }}"
        state: present

    - name: Create Users
      user:
        name: "{{ item }}"
        state: present
        password: "{{ item | password_hash('sha512','A512') }}"
        shell: /bin/bash
        groups: "{{ podcast_group }}"
        append: true
      loop: "{{ podcast_keys }}"

    - name: Create developer user
      user:
        name: "{{ developer_user }}"
        state: present
        password: "{{ developer_user | password_hash('sha512','A512') }}"
        shell: /bin/bash
        generate_ssh_key: true
        ssh_key_bits: 2048
        ssh_key_file: /home/{{ developer_user }}/.ssh/id_rsa_ansible
        groups: "{{ podcast_group }}" ## this is needed to send dbus messages too.
        append: true

    - name: Prepare folders for clone
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: developer
        group: developer # let's test immediately if group "developer" exists.
        mode: 'u+rwx'
      loop:
        - "{{ install_dir }}"
        - "{{ cockpit_module_install_dir }}"

## install stuff:

    - name: Install debian packages
      ansible.builtin.apt:
        name: "{{ debian_packages }}"
        update_cache: true
        state: present

    - name: Install latest hugo-extend
      ansible.builtin.apt:
        deb: "{{ hugo_deb_url }}"

## Now let's clone the repo

## NOTE: ssh keys are generated above for user "developer", so you should be able to clone github.com without any issue.
## The git user would not be registered (git config user.name/user.email) and you would still need to register the public key on github to push anything there.

    - name: Add a host in the configuration
      become: true
      become_user: developer
      ansible.builtin.copy:
        content: "Host github.com\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_rsa"
        dest: /home/developer/.ssh/config
        mode: preserve


    - name: Check for id_rsa
      ansible.builtin.stat:
        path: /tmp/id_rsa
      register: custom_keys

    - name: Replace id_rsa keys from the ones in /tmp/ if they are here
      when: custom_keys.stat.exists
      ansible.builtin.shell: |
        rm /home/developer/.ssh/id_rsa*
        mv /tmp/id_rsa* /home/developer/.ssh/
        chown developer:developer /home/developer/.ssh/*
        chmod 600 /home/developer/.ssh/*
      register: replace_custom_keys
      changed_when: replace_custom_keys.rc != 0 # <- Uses the return code to define when the task has changed.

    - name: Add id_rsa.pub as authorized_keys
      become: true
      become_user: developer
      when: custom_keys.stat.exists
      ansible.builtin.copy:
        src: /home/developer/.ssh/id_rsa.pub
        dest: /home/developer/.ssh/authorized_keys
        mode: preserve


    - name: Check for id_rsa in developer (in case it's already been installed)
      become: true
      become_user: developer
      ansible.builtin.stat:
        path: ~/.ssh/id_rsa
      register: custom_keys # re-register

    - name: Register github host key
      become: true
      become_user: developer
      ansible.builtin.shell: ssh-keyscan -t rsa github.com >> /home/developer/.ssh/known_hosts
      register: register_github_key
      changed_when: register_github_key.rc != 0


    - name: Clone repo SSH-based (custom-keys are present)
      become: true
      become_method: su
      become_user: developer
      when: custom_keys.stat.exists
      ansible.builtin.git:
        repo: git@github.com:yattoz/calvinball-website.git
        dest: "{{ install_dir }}"
        key_file: /home/developer/.ssh/id_rsa
        accept_hostkey: true
        version: devel

    - name: Fallback - Clone repo HTTPS-based
      become: true
      become_method: su
      become_user: developer
      when: not custom_keys.stat.exists
      ansible.builtin.git:
        repo: https://github.com/yattoz/calvinball-website
        dest: "{{ install_dir }}"
        key_file: /home/developer/.ssh/id_rsa
        accept_hostkey: true
        version: devel

    - name: Install ruby dependencies
      become: true
      become_method: su
      become_user: developer
      ansible.builtin.command:
        cmd: bundle install
        chdir: "{{ install_dir }}"

    - name: Create assets directory
      ansible.builtin.file:
        path: "{{ assets_content_dir }}"
        state: directory
        owner: root
        group: root
        mode: 'u+rwx'

    - name: Create folders for assets (audio, images, resources, docs)
      ansible.builtin.file:
        path: "{{ item.src }}"
        state: directory
        owner: developer
        group: developer
        mode: 'ug+rx'
      loop: "{{ web_content_folders + docs_content_folders }}"

    - name: Create subfolders for podcastkeys (audio, images, resources, docs)
      ansible.builtin.file:
        path: "{{ item[0].src }}/podcasts/{{ item[1] }}"
        state: directory
        owner: "{{ item[1] }}"
        group: developer
        mode: 'ug+rwx' # user and group, rwx
      with_nested:
        - "{{ web_content_folders + docs_content_folders }}"
        - "{{ podcast_keys }}"

    - name: "[TODO: pull from backup instead] Populare docs/ with repo content" ## TODO: this is a debug step and I should rather pull docs/ from the online backup instead.
      ansible.builtin.copy:
        src: "{{ install_dir }}/docs"
        dest: "{{ assets_content_dir }}"
        mode: preserve

    - name: Run ruby script to make sure everything works
      become: true
      become_method: su
      become_user: developer
      ansible.builtin.command:
        cmd: bundle exec ruby scripts/podcast_resources.rb --nodownload --localserve
        chdir: "{{ install_dir }}"

## create cron jobs

    - name: Set MAILTO to nothing
      ansible.builtin.cron:
        env: true
        name: MAILTO
        job: ""
        state: present

    - name: Create cron job for periodic remote checks
      ansible.builtin.cron:
        name: "periodic remote checks"
        user: developer
        job: "cd \"{{ install_dir }}\" && echo \"start\" > start.log && bundle exec ruby scripts/podcast_resources.rb 2>&1 > podcast_resources.log "
        minute: "13,28,43,58"

## copy config files in server_config to their location

    - name: Template XMPP and Google Sheets credentials
      ansible.builtin.template:
        src: "{{ install_dir }}/scripts/credentials.rb.example"
        dest: "{{ install_dir }}/scripts/credentials.rb"
        owner: developer
        group: developer
        mode: 'u+rw'

    - name: Copy default nginx config from repo
      ansible.builtin.copy:
        src: "{{ install_dir }}/server_config/etc/nginx/sites-available/default"
        dest: /etc/nginx/sites-available
        mode: preserve

    - name: Reload service nginx, in all cases
      ansible.builtin.systemd:
        name: nginx.service
        state: restarted

    - name: Install dbus config
      ansible.builtin.copy:
        src: "{{ install_dir }}/server_config/usr/share/dbus-1/system.d/"
        dest: /usr/share/dbus-1/system.d/
        force: true
        directory_mode: true
        mode: preserve

    - name: Reload service dbus, in all cases
      ansible.builtin.systemd:
        name: dbus.service
        state: restarted

## create path /var/www/html/calvinballconsortium and create symlinks to useuful folder:
## audio, dev.dist, dist, image, resources

    - name: Create path /var/www/html/calvinballconsortium
      ansible.builtin.file:
        path: "{{ web_content_dir }}"
        state: directory
        mode: 'u+rwx'

    - name: Create symbolic link
      file:
        src: "{{ item.src }}"
        dest: "{{ item.dst }}"
        state: link
        force: true # some folders aren't created yet like dev.dist but we want the link anyway
      loop: "{{ web_content_folders + web_site_folders }}"

## install cockpit module cockpit-navigator (.deb focal, from their github webpage)
    - name: Install cockpit module cockpit-navigator
      ansible.builtin.apt:
        deb: "{{ cockpit_navigator_deb_url }}"

## git clone and build the cockpit module

    - name: Clone cockpit module repo SSH-based (custom-keys are present)
      become: true
      become_method: su
      become_user: developer
      when: custom_keys.stat.exists
      ansible.builtin.git:
        repo: git@github.com:yattoz/cockpit-cvb-rebuild-site.git
        dest: "{{ cockpit_module_install_dir }}"
        key_file: /home/developer/.ssh/id_rsa
        accept_hostkey: true
        version: devel

    - name: Fallback - Clone repo HTTPS-based
      become: true
      become_method: su
      become_user: developer
      when: not custom_keys.stat.exists
      ansible.builtin.git:
        repo: https://github.com/yattoz/cockpit-cvb-rebuild-site
        dest: "{{ cockpit_module_install_dir }}"
        accept_hostkey: true
        version: devel

    - name: Build cockpit module (we use Debian's repo NPM, it's old but it works.)
      become: true
      become_method: su
      become_user: developer
      ansible.builtin.shell: |
        cd {{ cockpit_module_install_dir }}
        npm install
        make

## create symlink  /usr/share/cockpit/cvb-rebuild-website -> /home/yattoz/cockpit-cvb-rebuild-site/dist/
## OR make-install it (it's copied to the correct location)

    - name: Create cockpit module symbolic link
      ansible.builtin.file:
        src: "{{ cockpit_module_install_dir }}/dist"
        dest: "/usr/share/cockpit/cvb-rebuild-site"
        state: link

## install systemd service for dbus_watcher

    - name: Copy dbus service
      ansible.builtin.copy:
        src: "{{ install_dir }}/scripts/calvinball_daemon.service"
        dest: "/etc/systemd/system/calvinball_daemon.service"
        mode: preserve
        daemon_reload: true


    - name: Reload calvinball_daemon.service
      ansible.builtin.systemd:
        name: calvinball_daemon.service
        state: restarted
        enabled: true
        daemon_reload: true

    - name: Pause for 10 seconds for calvinball_daemon.service to restart
      ansible.builtin.pause:
        seconds: 10

## test dbus signal

    - name: Run site compilation through dbus signal
      become: true
      become_user: leretourdujeudi
      ansible.builtin.command:
        cmd: "
          dbus-send --system --print-reply --type=method_call
          --dest=\"fr.calvinballconsortium.service\"
          /fr/calvinballconsortium/runner
          fr.calvinballconsortium.interface.run
          string:\"localserve\" string:\"leretourdujeudi\""
