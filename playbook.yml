- name: The Play
  hosts: localhost
  vars_files:
    - vars/users.yml
    - vars/packages.yml
  vars:
    install_dir: /opt/calvinball-website

  tasks:
    - name: Ping
      ansible.builtin.ping:

    - name: Print message
      ansible.builtin.debug:
        msg: Hello world

  ## user tasks

    - name: Create group
      group:
        name: "{{ podcast_group }}"
        state: present

    - name: Create Users
      user:
        name: "{{ item }}"
        state: present
        password: "{{ item | password_hash('sha512','A512') }}"
        shell: /bin/bash
        group: "{{ podcast_group }}"
        append: true
      loop: "{{ podcast_keys }}"

    - name: Create developer user
      user:
        name: "{{ developer_user }}"
        state: present
        password: "{{ developer_user | password_hash('sha512','A512') }}"
        shell: /bin/bash
        generate_ssh_key: true
        ssh_key_bits: 2048
        ssh_key_file: /home/{{ developer_user }}/.ssh/id_rsa

## install stuff:

    - name: Install debian packages
      ansible.builtin.apt:
        name: "{{ debian_packages }}"
        update_cache: true
        state: present

    - name: update cache for aptitude
      ansible.builtin.apt:
        update_cache: True

    - name: Install latest hugo-extend
      ansible.builtin.apt:
        deb: https://github.com/gohugoio/hugo/releases/download/v0.111.3/hugo_extended_0.111.3_linux-amd64.deb

## Now let's clone the repo

## NOTE: ssh keys are generated above for user "developer", so you should be able to clone github.com without any issue.
## The git user would not be registered (git config user.name/user.email) and you would still need to register the public key on github to push anything there.

    - name: Add a host in the configuration
      become: true
      become_user: developer
      ansible.builtin.copy:
        content: "Host github.com\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_rsa"
        dest: /home/developer/.ssh/config

    - name: replace id_rsa keys from the ones in /tmp/ if they are here
      when: "'/tmp/id_rsa' is file"
      ansible.builtin.shell: |
        rm /home/developer/.ssh/id_rsa*
        mv /tmp/id_rsa* /home/developer/.ssh/
        chown developer:developer /home/developer/.ssh/*
        chmod 600 /home/developer/.ssh/*
      register: custom_keys

    - name: Register github host key
      become: true
      become_user: developer
      ansible.builtin.command:
        cmd: ssh-keyscan -t rsa github.com >> /home/developer/.ssh/known_hosts

    - name: Prepare folder for clone
      ansible.builtin.file: 
        path: "{{ install_dir }}"
        state: directory
        owner: developer
        group: developer

    - name: Clone repo SSH-based (custom-keys are present)
      become: true
      become_method: su
      become_user: developer
      when: custom_keys is success
      ansible.builtin.git:
        repo: git@github.com:yattoz/calvinball-website.git
        dest: "{{ install_dir }}"
        key_file: /home/developer/.ssh/id_rsa
        accept_hostkey: true

    - name: Fallback - Clone repo HTTPS-based
      become: true
      become_method: su
      become_user: developer
      when: custom_keys is skipped
      ansible.builtin.git:
        repo: https://github.com/yattoz/calvinball-website
        dest: "{{ install_dir }}"
        key_file: /home/developer/.ssh/id_rsa
        accept_hostkey: true

    - name: install ruby dependencies
      become: true
      become_method: su
      become_user: developer
      ansible.builtin.command:
        cmd: bundle install
        chdir: "{{ install_dir }}"

    - name: run ruby script to make sure everything works
      become: true
      become_method: su
      become_user: developer
      ansible.builtin.command:
        cmd: bundle exec ruby scripts/podcast_resources.rb --nodownload
        chdir: "{{ install_dir }}"

    - name: Replace 'origin' HTTP-based remote with SSH-based
      become: true
      become_user: developer
      when: custom_keys is skipped
      ansible.builtin.shell: |
        cd "{{ install_dir }}"
        git remote rm origin
        git remote add origin git@github.com:yattoz/calvinball-website.git

## create cron jobs
    - name: create cron job for periodic remote checks
      ansible.builtin.cron:
        name: "periodic remote checks"
        user: developer
        job: "cd \"{{ install_dir }}\" && echo \"start\" > start.log && git pull 2>&1 > git.log && bundle exec ruby scripts/podcast_resources.rb 2>&1 > podcast_resources.log "
        minute: "13,28,43,58"
        
    - name: backup to NAS
      ansible.builtin.cron:
        name: "backup to NAS"
        user: developer
        job: "{{ install_dir }}/backup_to_nas.sh"
        minute: "0"
        hour: "1"

## copy config files in server_config to their location

## create path /var/www/html/calvinballconsortium and create symlinks to useuful folder: audio, dev.dist, dist, image, resources, save (bon pas vraiment besoin de save lul)

## install cockpit module cockpit-navigator (.deb focal, from their github webpage)

## git clone and build the cockpit module

## create symlink  /usr/share/cockpit/cvb-rebuild-website -> /home/yattoz/cockpit-cvb-rebuild-site/dist/ OR make-install it (it's copied to the correct location)

## install systemd service for dbus_watcher


